//
//@author Alorse
//@version=4
strategy("Bollinger Bands Winner PRO [Alorse]", shorttitle="BB Winner PRO [Alorse]", overlay=true, pyramiding=0, currency=currency.USD, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_type=strategy.commission.percent, commission_value=0) 

txtVer = "2.0.3"
version = input(title="Version", type=input.string, defval=txtVer, options=[txtVer], tooltip="This is informational only, nothing will change.")
password = input(title="Password", type=input.string, defval="alorse", tooltip="If you want to use the PRO version, please contact me through my email alorse@gmail.com\nPRO version is priced at 30USDT, the information for the payment can be found in my profile https://www.tradingview.com/u/alorse or in tradingview Indicator description")

proVersion = password == "alorse,." ? true : false
liteVersion = not proVersion
lite = liteVersion ? (hour(time) % 2 == 0 ? true : false) : true

// Bollinger Bands
bbGroup = "Bollindger Bands"
src = input(title="Source", type=input.source, defval=close, group=bbGroup)
length = input(20, title="Length", group=bbGroup)
mult = input(2.0, title="StdDev", minval=0.001, maxval=5, group=bbGroup)

basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev

pb1 = plot(upper, color=color.new(color.teal, 50), title="Upper")
pb2 = plot(lower, color=color.new(color.teal, 50), title="Lower")
fill(pb1, pb2, color=color.new(color.teal, 98), title="Background")
plot(basis, "Basis", color=color.new(color.orange, 50))

// RSI
rsiGroup = "RSI Filter (PRO version)"
hasRSI = liteVersion ? false : input(true, title="╔══════   Use RSI   ══════╗", group=rsiGroup, tooltip="Long: Only when RSI is below 45\nShort: Only when RSI is above 55")
aboveRSI = input(45, title="Above", inline="Above", group=rsiGroup)
srcRSI = input(close, title="Source", type=input.source, group=rsiGroup)
lenRSI = input(14, title="Length", minval=1, group=rsiGroup)
belowRSI = input(55, title="Below", inline="Above", group=rsiGroup)
RSI = rsi(srcRSI, lenRSI)

// Aroon
aroonGroup = "Aroon Filter (PRO version)"
hasAroon = liteVersion ? false : input(false, title="╔══════ Use Aroon ══════╗", group=aroonGroup, tooltip="Aroon plays a key role in this strategy. It acts as a confirmation that the asset is currently in an uptrend. On the other hand, it acts as a stop if market conditions deteriorate. The strategy uses an Aroon Indicator set to 288 periods to provide a longer-term view on market conditions, not being heavily dependent on short-term volatility.")
lengthAr = input(288, title="Periods", minval=1, group=aroonGroup)
Confirmation = input(90, title="Confirmation", group=aroonGroup, inline="Above")
Stop = input(70, title="Stop", group=aroonGroup, inline="Above")
AroonUP = 100 * (highestbars(high, lengthAr+1) + lengthAr)/lengthAr
// AroonDown = 100 * (lowestbars(low, lengthAr+1) + lengthAr)/lengthAr
buyAroonFilter = hasAroon ? AroonUP > Confirmation : true
sellAroonFilter = hasAroon ? AroonUP < Stop : true

// Moving Average
maGroup = "Moving Average (PRO version)"
hasMa = liteVersion ? false : input(true, title="╔══════   Use MA   ══════╗", group=maGroup, tooltip="asd")
maType = input(title="Moving Average Type", type=input.string, defval="EMA", options=["EMA", "SMA"], group=maGroup)
maLen = input(200, minval=1, title="Moving Average length", group=maGroup)
ma = maType == "EMA" ? ema(src, maLen) : sma(src, maLen)
plot(hasMa ? ma : na, title="Moving Average", linewidth=1, color=color.new(color.blue, 10))
buyMaFilter = hasMa ? close > ma : true
sellMaFilter = hasMa ? close < ma : true

// Strategy Conditions
stratGroup = "Strategy (PRO version)"
candleper = liteVersion ? 0.3 : input(title="Candle %", type=input.integer, minval=0, maxval=100, defval=30, group=stratGroup, tooltip="When the candle's body passes the Bollinger Bands in this percentage, a new entry will open in the opposite direction.") * 0.01
showLong = liteVersion ? true : input(true, title="Long entries", group=stratGroup)
showShort = liteVersion ? false : input(false, title="Short entries", group=stratGroup)
closeEarly = liteVersion ? false : input(false, title="Close position early", group=stratGroup, tooltip="The position will be closed when the price touches the Bollinger Bands in the opposite direction and trade is in profit.")
candle_size = high-low
body_size = close > open ? close - open : open - close
buyzone = (candle_size*candleper) + low
sellzone = high - (candle_size*candleper)
buyRSIFilter = hasRSI ? RSI < aboveRSI : true
sellRSIFilter = hasRSI ? RSI > belowRSI : true

buy = buyzone < lower and close < open and buyRSIFilter and buyAroonFilter and buyMaFilter
sell = sellzone > upper and close > open and sellRSIFilter and sellAroonFilter and sellMaFilter

bought = strategy.opentrades[0] == 1 and strategy.position_size[0] > strategy.position_size[1]
entry_price = valuewhen(bought, open, 0)

closeLongEarly = close > entry_price and closeEarly
closeShortEarly = close < entry_price and closeEarly

// Stop Loss
slGroup = "Stop Loss (PRO version)"
useSL = liteVersion ? false : input(true, title="╔══════   Enable   ══════╗", group=slGroup, tooltip="If you are using this strategy for the Scalping or Futures market, we do not recommend using Stop Loss.")
SLbased = input(title="Based on", type=input.string, defval="Percent", options=["ATR", "Percent"], group=slGroup, tooltip="ATR: Average True Range\nPercent: eg. 5%.")
multiATR = input(3.5, title="ATR   Mult", type=input.float, group=slGroup, inline="atr")
lengthATR = input(14, title="Length", type=input.integer, group=slGroup, inline="atr")
SLPercent = input(6, title="Percent", type=input.float, group=slGroup) * 0.01

longStop = 0.0
shortStop = 0.0

if SLbased == "ATR"
    longStop := valuewhen(buy, low, 0) - (valuewhen(buy, rma(tr(true), lengthATR), 0) * multiATR)
    longStopPrev = nz(longStop[1], longStop)
    longStop := close[1] > longStopPrev ? max(longStop, longStopPrev) : longStop

    shortStop := (valuewhen(sell, rma(tr(true), lengthATR), 0) * multiATR) + valuewhen(sell, high, 0)
    shortStopPrev = nz(shortStop[1], shortStop)
    shortStop := close[1] > shortStopPrev ? max(shortStop, shortStopPrev) : shortStop
if SLbased == "Percent"
    longStop  := strategy.position_avg_price * (1 - SLPercent)
    shortStop := strategy.position_avg_price * (1 + SLPercent)

// Print Stop Loss
plotshape(useSL and strategy.position_size > 0 ? longStop : na, title = "Long Stop Loss", color=color.green, location=location.absolute)
plotshape(useSL and strategy.position_size < 0 ? shortStop : na, title = "Short Stop Loss", color=color.red, location=location.absolute)

// Backtesting
btGroup = "Backtesting (PRO version)"
startTime = input(title="Start time", type=input.time, defval=timestamp("Feb 01 2020 23:59:59"), group=btGroup)
endTime = input(title="End time", type=input.time, defval=timestamp("Feb 01 2099 23:59:59"), group=btGroup)

inDateRange = liteVersion ? true : time >= startTime and time <= endTime

if showLong and inDateRange
    strategy.entry("Long", true, when=buy and lite)
    if closeLongEarly
        strategy.close("Long", when=high > upper, comment="Close long early")
    if not showShort
        strategy.close("Long", when=buyzone > upper, comment="Close or Stop limit")
    if useSL
        strategy.exit("SL", "Long", stop=longStop)
if showShort and inDateRange
    strategy.entry("Short", false, when=buyzone > upper and lite)
    if closeShortEarly
        strategy.close("Short", when=low < lower, comment="Close short early") // Not working
    if not showLong
        strategy.close("Short", when=sellzone < lower, comment="Close or Stop limit")
    if useSL
        strategy.exit("SL", "Short", stop=shortStop)

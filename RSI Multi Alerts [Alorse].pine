//
//@author Alorse
//@version=4
study("RSI Multi Alerts [Alorse]", shorttitle = 'RSI Multi Alerts [Alorse]', overlay=true)

////////////
// INPUTS //

// RSI Params
rsi_length     = input(14, title = "RSI Length")
rsi_overbought = input(70, title = "RSI Overbought Level")
rsi_oversold   = input(30, title = "RSI Overbought Level")

// Symbols 
// There is a limit of 40 security calls so only 40 symbols at the same time is possible

s01 = input('ADAUSDT',   title="Symbol 1",  type=input.symbol)
s02 = input('ALPHAUSDT', title="Symbol 2",  type=input.symbol)
s03 = input('ALICEUSDT', title="Symbol 3",  type=input.symbol)
s04 = input('ANKRUSDT',  title="Symbol 4",  type=input.symbol)
s05 = input('ARPAUSDT',  title="Symbol 5",  type=input.symbol)
s06 = input('AVAXUSDT',  title="Symbol 6",  type=input.symbol)
s07 = input('AXSUSDT',   title="Symbol 7",  type=input.symbol)
s08 = input('BAKEUSDT',  title="Symbol 8",  type=input.symbol)
s09 = input('BELUSDT',   title="Symbol 9",  type=input.symbol)
s10 = input('BLZUSDT',   title="Symbol 10", type=input.symbol)
s11 = input('BTCUSDT',   title="Symbol 11", type=input.symbol)
s12 = input('CHZUSDT',   title="Symbol 12", type=input.symbol)
s13 = input('CTKUSDT',   title="Symbol 13", type=input.symbol)
s14 = input('CTSIUSDT',  title="Symbol 14", type=input.symbol)
s15 = input('CVCUSDT',   title="Symbol 15", type=input.symbol)
s16 = input('EGLDUSDT',  title="Symbol 16", type=input.symbol)
s17 = input('ENJUSDT',   title="Symbol 17", type=input.symbol)
s18 = input('ETCUSDT',   title="Symbol 18", type=input.symbol)
s19 = input('FILUSDT',   title="Symbol 19", type=input.symbol)
s20 = input('GRTUSDT',   title="Symbol 20", type=input.symbol)
s21 = input('HOTUSDT ',  title="Symbol 21", type=input.symbol)
s22 = input('ICPUSDT',   title="Symbol 22", type=input.symbol)
s23 = input('KNCUSDT',   title="Symbol 23", type=input.symbol)
s24 = input('LITUSDT',   title="Symbol 24", type=input.symbol)
s25 = input('MANAUSDT',  title="Symbol 25", type=input.symbol)
s26 = input('MATICUSDT', title="Symbol 26", type=input.symbol)
s27 = input('NEOUSDT',   title="Symbol 27", type=input.symbol)
s28 = input('NKNUSDT',   title="Symbol 28", type=input.symbol)
s29 = input('OGNUSDT',   title="Symbol 29", type=input.symbol)
s30 = input('REEFUSDT',  title="Symbol 30", type=input.symbol)
s31 = input('ROSEUSDT',  title="Symbol 31", type=input.symbol)
s32 = input('SFPUSDT',   title="Symbol 32", type=input.symbol)
s33 = input('SNXUSDT',   title="Symbol 33", type=input.symbol)
s34 = input('SXPUSDT',   title="Symbol 34", type=input.symbol)
s35 = input('TLMUSDT',   title="Symbol 35", type=input.symbol)
s36 = input('TRBUSDT',   title="Symbol 36", type=input.symbol)
s37 = input('UNFIUSDT',  title="Symbol 37", type=input.symbol)
s38 = input('WAVESUSDT', title="Symbol 38", type=input.symbol)
s39 = input('XRPUSDT',   title="Symbol 39", type=input.symbol)
s40 = input('ZECUSDT',   title="Symbol 40", type=input.symbol)

///////////////
// FUNCTIONS //

// RSI Screener Function (overbought / orvesold)
// Function outputs only 2 values
// * Value - Numeric value you want to display in screener
// * Cindition - True/False variable that shows if current symbol should be displayed in the screener

screenerFunc(_ticker) => 
    rsi     = security(_ticker, timeframe.period, rsi(close, rsi_length))
    
    cond    = rsi > rsi_overbought or rsi < rsi_oversold
    value   = rsi
    cleanTicker = str.replace_all(_ticker, "BINANCE:", "")
    if rsi < rsi_oversold
        alert('612e425361de9e0072e37083|AOS_Test|buy|' + cleanTicker + '|long', alert.freq_once_per_bar_close)
    if rsi > rsi_overbought
        alert('612e425361de9e0072e37083|AOS_Test|sell|' + cleanTicker + '|flat', alert.freq_once_per_bar_close)
    
    [cond, value]

///////////////////////////////////////
// Running Functions for all sybmols //

[v01, c01] = screenerFunc(s01)
[v02, c02] = screenerFunc(s02)
[v03, c03] = screenerFunc(s03)
[v04, c04] = screenerFunc(s04)
[v05, c05] = screenerFunc(s05)
[v06, c06] = screenerFunc(s06)
[v07, c07] = screenerFunc(s07)
[v08, c08] = screenerFunc(s08)
[v09, c09] = screenerFunc(s09)
[v10, c10] = screenerFunc(s10)
[v11, c11] = screenerFunc(s11)
[v12, c12] = screenerFunc(s12)
[v13, c13] = screenerFunc(s13)
[v14, c14] = screenerFunc(s14)
[v15, c15] = screenerFunc(s15)
[v16, c16] = screenerFunc(s16)
[v17, c17] = screenerFunc(s17)
[v18, c18] = screenerFunc(s18)
[v19, c19] = screenerFunc(s19)
[v20, c20] = screenerFunc(s20)
[v21, c21] = screenerFunc(s21)
[v22, c22] = screenerFunc(s22)
[v23, c23] = screenerFunc(s23)
[v24, c24] = screenerFunc(s24)
[v25, c25] = screenerFunc(s25)
[v26, c26] = screenerFunc(s26)
[v27, c27] = screenerFunc(s27)
[v28, c28] = screenerFunc(s28)
[v29, c29] = screenerFunc(s29)
[v30, c30] = screenerFunc(s30)
[v31, c31] = screenerFunc(s31)
[v32, c32] = screenerFunc(s32)
[v33, c33] = screenerFunc(s33)
[v34, c34] = screenerFunc(s34)
[v35, c35] = screenerFunc(s35)
[v36, c36] = screenerFunc(s36)
[v37, c37] = screenerFunc(s37)
[v38, c38] = screenerFunc(s38)
[v39, c39] = screenerFunc(s39)
[v40, c40] = screenerFunc(s40)

plot(close, color=color.new(color.white, 100))

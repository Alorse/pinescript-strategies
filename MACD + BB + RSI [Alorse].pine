//
//@author Alorse
//@version=4
strategy("MACD + BB + RSI [Alorse]", shorttitle="MACD + BB + RSI [Alorse]", overlay=true, pyramiding=0, currency=currency.USD, default_qty_type=strategy.percent_of_equity, initial_capital=1000, default_qty_value=20, commission_type=strategy.commission.percent, commission_value=0.01) 

txtVer = "1.0.6"
version = input(title="Version", type=input.string, defval=txtVer, options=[txtVer], tooltip="This is informational only, nothing will change.\n\nEntry conditions:\nThe MACD line crosses over the signal line.\nRSI less than 50.\nPrice below the BB baseline.\n\nExit conditions:\nRSI greater than 70.\nClosing price higher than upper BB.")
src = input(title="Source", type=input.source, defval=close)

// MACD
macdGroup = "MACD"
fast_length = input(title="Length   Fast", type=input.integer, defval=12, group=macdGroup, inline="macdLength")
slow_length = input(title="Slow", type=input.integer, defval=26, group=macdGroup, inline="macdLength")
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9, group=macdGroup)
sma_source = input(title="Oscillator", type=input.string, defval="EMA", options=["SMA", "EMA"], group=macdGroup, inline="macdMa", tooltip="Moving Average Type")
sma_signal = input(title="Signal Line", type=input.string, defval="EMA", options=["SMA", "EMA"], group=macdGroup, inline="macdMa", tooltip="Moving Average Type")
fast_ma = sma_source == "SMA" ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source == "SMA" ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? sma(macd, signal_length) : ema(macd, signal_length)

// Bollinger Bands
bbGroup = "Bollindger Bands"
isBB = input(true, title="╔═════ Show Bollinger Bands ═════╗", group=bbGroup, tooltip="If you don't want to see Bollinger Bands")
length = input(20, title="Length", group=bbGroup)
mult = input(2.0, title="StdDev", minval=0.001, maxval=5, group=bbGroup)
offset = input(0, "Offset", type = input.integer, minval = -500, maxval = 500, group=bbGroup)

basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev

plot(isBB ? basis : na, "Basis", color=color.new(color.orange, 75), offset = offset)
pb1 = plot(isBB ? upper : na, color=color.new(color.lime, 75), title="Upper")
pb2 = plot(isBB ? lower : na, color=color.new(color.lime, 75), title="Lower")
fill(pb1, pb2, color=color.new(color.lime, 99), title="Background")

// RSI
rsiGroup = "RSI"
lenRSI = input(14, title="Length", minval=1, group=rsiGroup)
RSI = rsi(src, lenRSI)

// DMI
dmiGroup = "Directional Movement Index"
isDMI = input(false, title="╔═════ DMI Filter ═════╗", group=dmiGroup, tooltip="Most Percent Profitable, less trades")
len = input(14, minval=1, title="DI Length", group=dmiGroup)
lensig = input(13, title="ADX Smoothing", minval=1, maxval=50, group=dmiGroup)
keyLevel = input(23, title="key level", group=dmiGroup)
[diplus,diminus,adx] = dmi(len, lensig)
dmiLongFilter = isDMI ? (diplus > diminus or adx < keyLevel) : true
dmiShortFilter = isDMI ? (diplus < diminus or adx < keyLevel) : true

// Strategy Conditions
stratGroup = "Strategy"
showLong = input(true, title="Long entries", group=stratGroup)
showShort = input(true, title="Short entries", group=stratGroup)
entryLong = crossover(macd, signal) and RSI < 50 and close < basis and dmiLongFilter
exitLong = RSI > 70 and close > upper
entryShort = crossunder(macd, signal) and RSI > 50 and close > basis and dmiShortFilter
exitShort = RSI < 31 and close < lower
doNotClose = input(25, title="Do not close trade yet", group=stratGroup, tooltip='Do not close the trade if ADX is lower than "X" and is rising.')
exitLong := diplus > diminus and adx < doNotClose and adx[0] > adx[1] and adx[1] > adx[2] ? false : exitLong
closeAfterXBars = input(true, title="Close after X # bars", group=stratGroup, tooltip="If trade is in profit")
xBars = input(20, title="# bars", group=stratGroup)

//If (#bars since close < lower BB)/2 is greater than green bars, so false.
longBars = barssince(close < lower)
greenBars = 0
if entryLong
    for i = 1 to longBars
        greenBars := close[i] > close[i+1] ? greenBars+1 : greenBars
    entryLong := greenBars >= ((longBars/2)-1) ? true : false
// Stop Loss
slGroup = "Stop Loss"
useSL = input(false, title="╔══════   Enable   ══════╗", group=slGroup, tooltip="If you are using this strategy for Scalping or Futures market, we do not recommend using Stop Loss.")
SLPercent = input(10, title="Percent", type=input.float, group=slGroup) * 0.01

longStop  = strategy.position_avg_price * (1 - SLPercent)
shortStop = strategy.position_avg_price * (1 + SLPercent)

longIsOpen = strategy.position_size > 0
shortIsOpen = strategy.position_size < 0

bought = strategy.opentrades[0] == 1 and strategy.position_size[0] > strategy.position_size[1]
entry_price = valuewhen(bought, open, 0)

var int nPastBars=0
if strategy.position_size > 0
    nPastBars:=nPastBars+1
if strategy.position_size == 0    
    nPastBars:=0
if closeAfterXBars
    exitLong := nPastBars >= xBars and close > upper and close > entry_price ? true : exitLong

if showLong
    strategy.entry("Long", true, when=entryLong and not shortIsOpen)
    strategy.close("Long", when=exitLong)
    if useSL
        strategy.exit("Stop Loss", "Long", stop=longStop)
if showShort
    strategy.entry("Short", false, when=entryShort and not longIsOpen)
    strategy.close("Short", when=exitShort, comment="Exit")
    if useSL
        strategy.exit("Stop Loss", "Short", stop=shortStop)
